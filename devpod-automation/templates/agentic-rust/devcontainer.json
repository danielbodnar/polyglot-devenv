{
  "name": "Agentic Rust Development Environment",
  "image": "mcr.microsoft.com/devcontainers/rust:1-bullseye",
  "features": {
    "ghcr.io/devcontainers/features/node:1": {
      "version": "20",
      "nodeGypDependencies": true
    },
    "ghcr.io/devcontainers/features/docker-in-docker:2": {
      "version": "latest",
      "dockerDashComposeVersion": "v2"
    }
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "rust-lang.rust-analyzer",
        "tamasfe.even-better-toml",
        "serayuzgur.crates",
        "vadimcn.vscode-lldb",
        "ms-vscode.vscode-json",
        "ms-vscode.cmake-tools",
        "ms-vscode.cpptools",
        "formulahendry.code-runner"
      ],
      "settings": {
        "rust-analyzer.linkedProjects": ["./Cargo.toml"],
        "rust-analyzer.cargo.buildScripts.enable": true,
        "rust-analyzer.procMacro.enable": true,
        "rust-analyzer.checkOnSave.command": "clippy",
        "rust-analyzer.inlayHints.enable": true,
        "rust-analyzer.completion.addCallParentheses": true,
        "[rust]": {
          "editor.defaultFormatter": "rust-lang.rust-analyzer",
          "editor.formatOnSave": true,
          "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit"
          }
        }
      }
    },
    "devpod": {
      "prebuildRepository": "ghcr.io/ricable/polyglot-devenv-agentic-rust"
    }
  },
  "containerEnv": {
    "RUST_BACKTRACE": "1",
    "RUST_LOG": "debug",
    "CARGO_TARGET_DIR": "/workspace/target",
    "RUSTC_WRAPPER": "sccache",
    "AGUI_LOG_LEVEL": "debug",
    "MCP_SERVER_URL": "http://host.docker.internal:3001",
    "OPENAI_API_KEY": "${localEnv:OPENAI_API_KEY}",
    "ANTHROPIC_API_KEY": "${localEnv:ANTHROPIC_API_KEY}",
    "AGUI_RUNTIME_MODE": "development"
  },
  "mounts": [
    "type=volume,source=cargo-cache,target=/usr/local/cargo/registry",
    "type=volume,source=cargo-target,target=/workspace/target",
    "type=volume,source=sccache,target=/home/vscode/.cache/sccache"
  ],
  "forwardPorts": [
    8000,
    8001,
    8002,
    3000,
    4111,
    2024,
    9000,
    3001,
    5000
  ],
  "portsAttributes": {
    "8000": {
      "label": "Rust Agent Server",
      "onAutoForward": "notify"
    },
    "8001": {
      "label": "Tokio Agent Runtime",
      "onAutoForward": "notify"
    },
    "8002": {
      "label": "Agent Development Server",
      "onAutoForward": "notify"
    },
    "3000": {
      "label": "Web Interface",
      "onAutoForward": "notify"
    },
    "4111": {
      "label": "Mastra Client",
      "onAutoForward": "silent"
    },
    "2024": {
      "label": "LangGraph Server",
      "onAutoForward": "silent"
    },
    "9000": {
      "label": "LlamaIndex Server",
      "onAutoForward": "silent"
    },
    "3001": {
      "label": "MCP Server",
      "onAutoForward": "silent"
    },
    "5000": {
      "label": "Additional Development Server",
      "onAutoForward": "silent"
    }
  },
  "postCreateCommand": [
    "echo 'Setting up Agentic Rust environment...'",
    "echo 'Installing sccache for faster builds...'",
    "cargo install sccache",
    "echo 'Creating Rust project structure...'",
    "mkdir -p src/agents src/agui src/mcp src/api tests examples",
    "echo 'Creating Cargo.toml with agent dependencies...'",
    "cat > Cargo.toml << 'EOF'\n[package]\nname = \"agentic-rust\"\nversion = \"0.1.0\"\nedition = \"2021\"\nauthors = [\"Agentic Rust Developer\"]\ndescription = \"Agentic Rust Development Environment\"\nreadme = \"README.md\"\n\n[dependencies]\n# Async runtime\ntokio = { version = \"1.0\", features = [\"full\"] }\nasync-trait = \"0.1\"\nfutures = \"0.3\"\n\n# Web framework\naxum = { version = \"0.7\", features = [\"headers\", \"ws\"] }\ntower = \"0.4\"\ntower-http = { version = \"0.5\", features = [\"cors\", \"trace\"] }\nhyper = \"1.0\"\n\n# HTTP client\nreqwest = { version = \"0.12\", features = [\"json\", \"stream\"] }\n\n# Serialization\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\ntoml = \"0.8\"\n\n# Error handling\nthiserror = \"1.0\"\nanyhow = \"1.0\"\n\n# Logging\ntracing = \"0.1\"\ntracing-subscriber = { version = \"0.3\", features = [\"env-filter\"] }\ntracing-appender = \"0.2\"\n\n# UUID and time\nuuid = { version = \"1.0\", features = [\"v4\", \"serde\"] }\nchrono = { version = \"0.4\", features = [\"serde\"] }\n\n# AI/ML libraries\ncandle-core = \"0.4\"\ncandle-nn = \"0.4\"\ncandle-transformers = \"0.4\"\n\n# Environment variables\ndotenv = \"0.15\"\n\n# Testing\nmockall = \"0.12\"\n\n[dev-dependencies]\ntokio-test = \"0.4\"\naxum-test = \"14.0\"\nwiremock = \"0.6\"\n\n[profile.dev]\nopt-level = 0\ndebug = true\n\n[profile.release]\nopt-level = 3\nlto = true\ncodegen-units = 1\npanic = \"abort\"\n\n[[bin]]\nname = \"agent-server\"\npath = \"src/bin/agent-server.rs\"\n\n[[bin]]\nname = \"mcp-client\"\npath = \"src/bin/mcp-client.rs\"\nEOF",
    "echo 'Creating main library structure...'",
    "cat > src/lib.rs << 'EOF'\npub mod agents;\npub mod agui;\npub mod mcp;\npub mod api;\npub mod error;\npub mod config;\n\npub use error::{AgentError, Result};\npub use config::AgentConfig;\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_works() {\n        assert_eq!(2 + 2, 4);\n    }\n}\nEOF",
    "cat > src/error.rs << 'EOF'\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum AgentError {\n    #[error(\"HTTP client error: {0}\")]\n    Http(#[from] reqwest::Error),\n    \n    #[error(\"Serialization error: {0}\")]\n    Serialization(#[from] serde_json::Error),\n    \n    #[error(\"IO error: {0}\")]\n    Io(#[from] std::io::Error),\n    \n    #[error(\"Agent error: {0}\")]\n    Agent(String),\n    \n    #[error(\"MCP error: {0}\")]\n    Mcp(String),\n    \n    #[error(\"Configuration error: {0}\")]\n    Config(String),\n}\n\npub type Result<T> = std::result::Result<T, AgentError>;\nEOF",
    "cat > src/config.rs << 'EOF'\nuse serde::{Deserialize, Serialize};\nuse std::env;\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct AgentConfig {\n    pub agent_id: String,\n    pub name: String,\n    pub description: String,\n    pub capabilities: Vec<String>,\n    pub mcp_server_url: String,\n    pub openai_api_key: Option<String>,\n    pub anthropic_api_key: Option<String>,\n    pub log_level: String,\n}\n\nimpl Default for AgentConfig {\n    fn default() -> Self {\n        Self {\n            agent_id: uuid::Uuid::new_v4().to_string(),\n            name: \"Rust Agent\".to_string(),\n            description: \"Agentic Rust Development Agent\".to_string(),\n            capabilities: vec![\n                \"code_generation\".to_string(),\n                \"testing\".to_string(),\n                \"analysis\".to_string(),\n            ],\n            mcp_server_url: env::var(\"MCP_SERVER_URL\")\n                .unwrap_or_else(|_| \"http://localhost:3001\".to_string()),\n            openai_api_key: env::var(\"OPENAI_API_KEY\").ok(),\n            anthropic_api_key: env::var(\"ANTHROPIC_API_KEY\").ok(),\n            log_level: env::var(\"RUST_LOG\")\n                .unwrap_or_else(|_| \"debug\".to_string()),\n        }\n    }\n}\nEOF",
    "mkdir -p src/agents src/agui src/mcp src/api src/bin",
    "cat > src/agents/mod.rs << 'EOF'\nuse async_trait::async_trait;\nuse serde::{Deserialize, Serialize};\nuse crate::{Result, AgentError};\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct AgentMessage {\n    pub id: String,\n    pub role: MessageRole,\n    pub content: String,\n    pub timestamp: chrono::DateTime<chrono::Utc>,\n}\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub enum MessageRole {\n    User,\n    Assistant,\n    System,\n}\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct AgentResponse {\n    pub success: bool,\n    pub data: Option<serde_json::Value>,\n    pub error: Option<String>,\n    pub agent_id: String,\n}\n\n#[async_trait]\npub trait Agent: Send + Sync {\n    async fn process_message(&self, message: AgentMessage) -> Result<AgentResponse>;\n    async fn get_capabilities(&self) -> Vec<String>;\n    fn get_id(&self) -> String;\n    fn get_name(&self) -> String;\n}\n\npub struct RustAgent {\n    id: String,\n    name: String,\n    capabilities: Vec<String>,\n}\n\nimpl RustAgent {\n    pub fn new(name: String) -> Self {\n        Self {\n            id: uuid::Uuid::new_v4().to_string(),\n            name,\n            capabilities: vec![\n                \"rust_development\".to_string(),\n                \"async_programming\".to_string(),\n                \"performance_optimization\".to_string(),\n            ],\n        }\n    }\n}\n\n#[async_trait]\nimpl Agent for RustAgent {\n    async fn process_message(&self, message: AgentMessage) -> Result<AgentResponse> {\n        tracing::info!(\"Processing message: {}\", message.content);\n        \n        // Simple echo response for now\n        Ok(AgentResponse {\n            success: true,\n            data: Some(serde_json::json!({\n                \"response\": format!(\"Rust agent {} processed: {}\", self.name, message.content),\n                \"capabilities\": self.capabilities\n            })),\n            error: None,\n            agent_id: self.id.clone(),\n        })\n    }\n    \n    async fn get_capabilities(&self) -> Vec<String> {\n        self.capabilities.clone()\n    }\n    \n    fn get_id(&self) -> String {\n        self.id.clone()\n    }\n    \n    fn get_name(&self) -> String {\n        self.name.clone()\n    }\n}\nEOF",
    "cat > src/bin/agent-server.rs << 'EOF'\nuse axum::{\n    extract::{Path, State},\n    http::StatusCode,\n    response::Json,\n    routing::{get, post},\n    Router,\n};\nuse std::sync::Arc;\nuse tokio::net::TcpListener;\nuse tower_http::cors::CorsLayer;\nuse tracing_subscriber;\n\nuse agentic_rust::{\n    agents::{Agent, AgentMessage, RustAgent},\n    config::AgentConfig,\n    Result,\n};\n\n#[derive(Clone)]\nstruct AppState {\n    agent: Arc<dyn Agent>,\n    config: AgentConfig,\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    tracing_subscriber::init();\n    \n    let config = AgentConfig::default();\n    let agent = Arc::new(RustAgent::new(\"Agentic Rust Server\".to_string()));\n    \n    let state = AppState { agent, config };\n    \n    let app = Router::new()\n        .route(\"/\", get(health_check))\n        .route(\"/health\", get(health_check))\n        .route(\"/agent/process\", post(process_message))\n        .route(\"/agent/capabilities\", get(get_capabilities))\n        .route(\"/agent/:id\", get(get_agent_info))\n        .layer(CorsLayer::permissive())\n        .with_state(state);\n    \n    let listener = TcpListener::bind(\"0.0.0.0:8000\").await?;\n    tracing::info!(\"Agentic Rust server listening on 0.0.0.0:8000\");\n    \n    axum::serve(listener, app).await?;\n    \n    Ok(())\n}\n\nasync fn health_check() -> Json<serde_json::Value> {\n    Json(serde_json::json!({\n        \"status\": \"healthy\",\n        \"service\": \"agentic-rust\",\n        \"version\": \"0.1.0\"\n    }))\n}\n\nasync fn process_message(\n    State(state): State<AppState>,\n    Json(message): Json<AgentMessage>,\n) -> Result<Json<serde_json::Value>, StatusCode> {\n    match state.agent.process_message(message).await {\n        Ok(response) => Ok(Json(serde_json::to_value(response).unwrap())),\n        Err(_) => Err(StatusCode::INTERNAL_SERVER_ERROR),\n    }\n}\n\nasync fn get_capabilities(\n    State(state): State<AppState>,\n) -> Json<serde_json::Value> {\n    let capabilities = state.agent.get_capabilities().await;\n    Json(serde_json::json!({\n        \"capabilities\": capabilities,\n        \"agent_id\": state.agent.get_id(),\n        \"agent_name\": state.agent.get_name()\n    }))\n}\n\nasync fn get_agent_info(\n    Path(id): Path<String>,\n    State(state): State<AppState>,\n) -> Json<serde_json::Value> {\n    Json(serde_json::json!({\n        \"id\": id,\n        \"name\": state.agent.get_name(),\n        \"capabilities\": state.agent.get_capabilities().await,\n        \"status\": \"active\"\n    }))\n}\nEOF",
    "echo 'Creating basic test files...'",
    "cat > tests/integration_test.rs << 'EOF'\nuse agentic_rust::agents::{RustAgent, Agent, AgentMessage, MessageRole};\n\n#[tokio::test]\nasync fn test_rust_agent_creation() {\n    let agent = RustAgent::new(\"Test Agent\".to_string());\n    assert_eq!(agent.get_name(), \"Test Agent\");\n    assert!(!agent.get_id().is_empty());\n}\n\n#[tokio::test]\nasync fn test_agent_message_processing() {\n    let agent = RustAgent::new(\"Test Agent\".to_string());\n    \n    let message = AgentMessage {\n        id: uuid::Uuid::new_v4().to_string(),\n        role: MessageRole::User,\n        content: \"Hello, agent!\".to_string(),\n        timestamp: chrono::Utc::now(),\n    };\n    \n    let response = agent.process_message(message).await.unwrap();\n    assert!(response.success);\n    assert!(response.data.is_some());\n}\nEOF",
    "echo 'Building initial project...'",
    "cargo build",
    "echo 'Running tests...'",
    "cargo test",
    "echo 'Agentic Rust environment ready! 🤖🦀'"
  ],
  "postStartCommand": [
    "echo 'Agentic Rust DevPod ready!'",
    "echo '🚀 Start agent server: cargo run --bin agent-server'",
    "echo '🧪 Run tests: cargo test'",
    "echo '🔍 Check code: cargo clippy'",
    "echo '🎯 Build release: cargo build --release'"
  ],
  "postAttachCommand": "echo 'Welcome to Agentic Rust DevPod! 🤖🦀 Ready for high-performance agent development.'"
}