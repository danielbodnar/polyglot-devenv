{
  "// Claude Code Hooks Configuration": "Intelligent automation for polyglot development environment",
  "// Documentation": "Each hook provides specific automation for code quality, security, and performance",
  "// Docker MCP Integration": "Docker MCP Toolkit with HTTP/SSE transport for Claude and Gemini clients",
  "mcp": {
    "servers": {
      "MCP_DOCKER": {
        "command": "docker",
        "args": ["mcp", "gateway", "run"],
        "type": "stdio"
      }
    }
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'file_path=$(echo \"$0\" | jq -r \".tool_input.file_path // \\\"\\\"\" 2>/dev/null || echo \"\"); if [[ \"$file_path\" =~ \\.py$ ]] || [[ \"$PWD\" =~ python-env ]]; then echo \"🐍 Auto-formatting Python files...\" && cd python-env && devbox run format --quiet 2>/dev/null || true; elif [[ \"$file_path\" =~ \\.(ts|js|tsx|jsx)$ ]] || [[ \"$PWD\" =~ typescript-env ]]; then echo \"📘 Auto-formatting TypeScript/JavaScript files...\" && cd typescript-env && devbox run format --quiet 2>/dev/null || true; elif [[ \"$file_path\" =~ \\.rs$ ]] || [[ \"$PWD\" =~ rust-env ]]; then echo \"🦀 Auto-formatting Rust files...\" && cd rust-env && devbox run format --quiet 2>/dev/null || true; elif [[ \"$file_path\" =~ \\.go$ ]] || [[ \"$PWD\" =~ go-env ]]; then echo \"🐹 Auto-formatting Go files...\" && cd go-env && devbox run format --quiet 2>/dev/null || true; elif [[ \"$file_path\" =~ \\.nu$ ]] || [[ \"$PWD\" =~ nushell-env ]]; then echo \"🐚 Auto-formatting Nushell files...\" && cd nushell-env && devbox run format --quiet 2>/dev/null || true; fi'"
          }
        ]
      },
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'file_path=$(echo \"$0\" | jq -r \".tool_input.file_path // \\\"\\\"\" 2>/dev/null || echo \"\"); if [[ \"$file_path\" =~ test.*\\.py$|.*_test\\.py$|.*\\.test\\.py$ ]]; then echo \"🧪 Running Python tests...\" && cd python-env && devbox run test --quiet 2>/dev/null || true; elif [[ \"$file_path\" =~ .*\\.(test|spec)\\.(ts|js)$|.*\\.test\\.(tsx|jsx)$ ]]; then echo \"🧪 Running TypeScript/JavaScript tests...\" && cd typescript-env && devbox run test --quiet 2>/dev/null || true; elif [[ \"$file_path\" =~ .*_test\\.rs$|tests/.*\\.rs$ ]]; then echo \"🧪 Running Rust tests...\" && cd rust-env && devbox run test --quiet 2>/dev/null || true; elif [[ \"$file_path\" =~ .*_test\\.go$|.*\\.test\\.go$ ]]; then echo \"🧪 Running Go tests...\" && cd go-env && devbox run test --quiet 2>/dev/null || true; elif [[ \"$file_path\" =~ test.*\\.nu$|.*_test\\.nu$ ]]; then echo \"🧪 Running Nushell tests...\" && cd nushell-env && devbox run test --quiet 2>/dev/null || true; fi'"
          }
        ]
      },
      {
        "// Context Engineering Auto-Triggers Hook": "Automatically generates PRPs when feature files are edited",
        "// Environment Detection": "Analyzes content to detect target environments (python, typescript, rust, go, nushell)",
        "// Smart Triggering": "Uses content hashing and cooldown periods to avoid excessive regeneration",
        "// PRP Generation": "Integrates with existing /generate-prp infrastructure",
        "// Feature Files": "Monitors context-engineering/workspace/features/ directory",
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "python",
            "script": ".claude/hooks/context-engineering-auto-triggers.py"
          }
        ]
      },
      {
        "// Smart Environment Orchestration Hook": "Intelligent DevPod provisioning and environment switching",
        "// Auto-Provisioning": "Automatically provisions DevPod containers based on file context",
        "// Usage Analytics": "Tracks environment usage patterns for optimization",
        "// Resource Management": "Integrates with centralized DevPod management system",
        "// Multi-Environment": "Coordinates across Python, TypeScript, Rust, Go, and Nushell environments",
        "matcher": "Edit|MultiEdit|Write|Read",
        "hooks": [
          {
            "type": "python",
            "script": ".claude/hooks/smart-environment-orchestration.py"
          }
        ]
      },
      {
        "// Cross-Environment Dependency Tracking Hook": "Monitors package files and validates compatibility",
        "// Package Monitoring": "Tracks changes in package.json, Cargo.toml, pyproject.toml, go.mod, devbox.json",
        "// Security Scanning": "Scans for vulnerabilities and suspicious packages",
        "// Compatibility Analysis": "Detects version conflicts and cross-environment issues",
        "// Recommendations": "Provides optimization suggestions for dependency management",
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "python",
            "script": ".claude/hooks/cross-environment-dependency-tracking.py"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'command=$(echo \"$0\" | jq -r \".tool_input.command // \\\"\\\"\" 2>/dev/null || echo \"\"); if [[ \"$command\" =~ git.*commit ]]; then echo \"🔍 Running pre-commit validation...\" && if [[ \"$PWD\" =~ python-env ]]; then cd python-env && devbox run lint --quiet 2>/dev/null || true; elif [[ \"$PWD\" =~ typescript-env ]]; then cd typescript-env && devbox run lint --quiet 2>/dev/null || true; elif [[ \"$PWD\" =~ rust-env ]]; then cd rust-env && devbox run lint --quiet 2>/dev/null || true; elif [[ \"$PWD\" =~ go-env ]]; then cd go-env && devbox run lint --quiet 2>/dev/null || true; elif [[ \"$PWD\" =~ nushell-env ]]; then cd nushell-env && devbox run check --quiet 2>/dev/null || true; else echo \"Running cross-language validation...\" && nu nushell-env/scripts/validate.nu 2>/dev/null || true; fi; fi'"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'file_path=$(echo \"$0\" | jq -r \".tool_input.file_path // \\\"\\\"\" 2>/dev/null || echo \"\"); if [[ \"$file_path\" =~ \\.(env|config|json|yaml|yml)$ ]]; then echo \"🔐 Scanning for secrets in configuration files...\" && (command -v git-secrets >/dev/null && git secrets --scan \"$file_path\" 2>/dev/null || echo \"git-secrets not installed, skipping scan\") || true; fi'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'echo \"🎯 Task completed! Running status check...\"; git status 2>/dev/null || echo \"Not in a git repository\"; echo \"📊 Running cross-language validation summary...\"; nu nushell-env/scripts/validate.nu --parallel 2>/dev/null || echo \"Cross-language validation completed with some issues\"'"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'echo \"🔔 Claude Code notification: $(echo \"$0\" | jq -r \".message // \\\"Unknown notification\\\"\" 2>/dev/null || echo \"Unknown notification\")\" >> ~/.claude/notifications.log'"
          }
        ]
      }
    ],
    "PostToolUse_ClaudeFlow": [
      {
        "// Claude-Flow Integration Hook": "Automatically monitors and manages claude-flow agents",
        "// Agent Monitoring": "Tracks claude-flow agent status across environments",
        "// Task Spawning": "Auto-spawns relevant tasks based on context",
        "// Hive-Mind Coordination": "Coordinates multi-agent workflows",
        "// Environment Awareness": "Adapts tasks to current environment (Python, TypeScript, Rust, Go, Nushell)",
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'file_path=$(echo \"$0\" | jq -r \".tool_input.file_path // \\\"\\\"\" 2>/dev/null || echo \"\"); if [[ \"$file_path\" =~ \\.(py|ts|rs|go|nu)$ ]]; then echo \"🤖 Claude-Flow: Checking agent status...\"; npx --yes claude-flow@alpha status --quiet 2>/dev/null || echo \"Claude-flow not active\"; fi'"
          }
        ]
      }
    ],
    "PostToolUse_FailureHandling": [
      {
        "// Failure Pattern Learning Hook": "Analyzes command failures to learn patterns and improve future error handling",
        "// Environment Detection": "Automatically detects environment context (python, typescript, rust, go, nushell)",
        "// Data Collection": "Records command, exit code, output, and environment for pattern analysis",
        "// AI Learning": "Uses collected data to provide intelligent failure analysis and solution suggestions",
        "// Trigger Condition": "Only activates when command exit code is non-zero (failure detected)",
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'exit_code=$(echo \"$0\" | jq -r \".exit_code // 0\" 2>/dev/null || echo \"0\"); if [[ \"$exit_code\" != \"0\" ]]; then command=$(echo \"$0\" | jq -r \".tool_input.command // \\\"\\\"\" 2>/dev/null || echo \"\"); output=$(echo \"$0\" | jq -r \".tool_result.stderr // .tool_result.stdout // \\\"\\\"\" 2>/dev/null || echo \"\"); environment=\"unknown\"; if [[ \"$PWD\" =~ python-env ]]; then environment=\"python\"; elif [[ \"$PWD\" =~ typescript-env ]]; then environment=\"typescript\"; elif [[ \"$PWD\" =~ rust-env ]]; then environment=\"rust\"; elif [[ \"$PWD\" =~ go-env ]]; then environment=\"go\"; elif [[ \"$PWD\" =~ nushell-env ]]; then environment=\"nushell\"; fi; echo \"🚨 Command failure detected, analyzing pattern...\"; nu nushell-env/scripts/failure-pattern-learning.nu record \"$environment\" \"$command\" \"$exit_code\" \"$output\" 2>/dev/null || echo \"Failure pattern analysis completed\"; fi'"
          },
          {
            "type": "python",
            "script": ".claude/hooks/intelligent-error-resolution.py"
          }
        ]
      }
    ]
  }
}
